buildscript {
    repositories {
        mavenLocal()
        //maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }
        gradlePluginPortal()
        maven { url 'https://jitpack.io' }
        google()
        //jcenter()
    }

    dependencies {
        classpath "net.sf.proguard:proguard-gradle:$proguardVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        //classpath 'com.github.jengelman.gradle.plugins:shadow:7.1.2'
        //classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.1.2'
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:${ksp_version}"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin:  'com.google.devtools.ksp' //version "$ksp_version"

//plugins { id 'com.github.johnrengelman.shadow' version '7.1.2'}
//plugins {
//    id 'application'
//    id 'kotlin'  version "$kotlin_version"
//    id 'kotlinx-serialization' version "$kotlinx_serialization_version"
//    id 'com.github.johnrengelman.shadow' version "$shadowVersion"
//    id 'com.google.devtools.ksp' version "$ksp_version"
//}


//application { mainClass = 'io.ktor.server.netty.EngineMain'}
mainClassName = "io.ktor.server.netty.EngineMain"


group 'com.github.rwsbillyang.rule'
version "1.0.0"



shadowJar {
    //minimize()
    manifest {
        attributes 'Main-Class': mainClassName
    }
}


sourceCompatibility = "$jdkVersion"
targetCompatibility = "$jdkVersion"

compileKotlin {
    kotlinOptions.jvmTarget = "$jdkVersion"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "$jdkVersion"
}

// 指定编码格式
[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
repositories {
    mavenLocal()
    //maven{ url 'https://maven.aliyun.com/nexus/content/groups/public/'}
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap") }
    gradlePluginPortal()
    maven { url 'https://jitpack.io' }
    google()
    //jcenter()
}

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}
// Use KSP Generated sources
sourceSets.main {
    java.srcDirs("build/generated/ksp/main/kotlin")
}
kotlin {
    sourceSets.main {
        kotlin.srcDir("build/generated/ksp/main/kotlin")
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    testImplementation("io.ktor:ktor-server-tests:$ktor_version")

    implementation("ch.qos.logback:logback-classic:$logback_version")

    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinx_serialization_version") // JVM dependency
    implementation("io.ktor:ktor-serialization:$ktor_version")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")

    implementation("io.ktor:ktor-server-netty:$ktor_version")
    //implementation("io.ktor:ktor-server-auth:$ktor_version")
    implementation("io.ktor:ktor-server-auth-jwt:$ktor_version")
    implementation("io.ktor:ktor-server-cors:$ktor_version")
    implementation("io.ktor:ktor-server-data-conversion:$ktor_version")
    implementation("io.ktor:ktor-server-forwarded-header:$ktor_version")
    implementation("io.ktor:ktor-server-partial-content:$ktor_version")
    implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")
    implementation("io.ktor:ktor-server-status-pages:$ktor_version")
    implementation("io.ktor:ktor-server-call-logging:$ktor_version")
    //implementation("io.ktor:ktor-server-websockets:$ktor_version")
    implementation("io.ktor:ktor-server-content-negotiation:$ktor_version")
    implementation("io.ktor:ktor-server-call-id:$ktor_version")
    implementation("io.ktor:ktor-server-resources:$ktor_version")

//    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
//    implementation "io.ktor:ktor-client-cio-jvm:$ktor_version"
//    implementation "io.ktor:ktor-client-content-negotiation:$ktor_version"
//    implementation("io.ktor:ktor-client-logging-jvm:$ktor_version")
//    implementation "io.ktor:ktor-client-encoding:$ktor_version"


    testImplementation("io.ktor:ktor-server-test-host:$ktor_version")
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    implementation "io.insert-koin:koin-core:$koin_version"
    testImplementation "io.insert-koin:koin-test:$koin_version"
    implementation "io.insert-koin:koin-ktor:$koin_version"
    implementation "io.insert-koin:koin-logger-slf4j:$koin_version"
    //implementation "io.insert-koin:koin-annotations:$koin_ksp_version"
//        ksp "io.insert-koin:koin-ksp-compiler:$koin_ksp_version"

    implementation ("com.github.jershell:kbson:$kbson_version")
//    implementation ("org.litote.kmongo:kmongo-coroutine-serialization:$kmongo_version")

    testImplementation "com.github.ben-manes.caffeine:caffeine:$caffeineVersion"
    implementation("com.github.ben-manes.caffeine:caffeine:$caffeineVersion")

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    //compileOnly("org.apache.commons:commons-lang3:$commonsLang3Version")

    //commons-codec 1.13 会报 base64异常，1.10，1.15没有问题
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    //implementation("commons-codec:commons-codec:$commonsCodecVersion")





    implementation("com.github.rwsbillyang:ktorKit:$ktorKitVersion")


    implementation "mysql:mysql-connector-java:$mysqlConnectorVersion"
    implementation "com.zaxxer:HikariCP:$HikariCPVersion"

    implementation(platform("org.komapper:komapper-platform:$komapperVersion"))
    ksp(platform("org.komapper:komapper-platform:$komapperVersion"))
    implementation("org.komapper:komapper-starter-jdbc:$komapperVersion")
    implementation("org.komapper:komapper-dialect-mysql-jdbc:$komapperVersion")
    ksp("org.komapper:komapper-processor")

    implementation project(":runtime")
    //implementation "com.github.rwsbillyang.rule:runtime:1.0.0"

    //compileOnly "com.github.rwsbillyang:yinyang:1.0.0"
    implementation "com.github.rwsbillyang:yinyang:1.0.0"
}

